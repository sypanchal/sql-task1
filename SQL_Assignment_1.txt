1. emp_department

create table emp_department (
    dpt_code int primary key, 
    dpt_name varchar(20) not null, 
    dpt_allotment int not null
)

INSERT INTO emp_department (DPT_CODE, DPT_NAME, DPT_ALLOTMENT) VALUES
(57, 'IT', 65000),
(63, 'Finance', 15000),
(47, 'HR', 240000),
(27, 'RD', 55000),
(89, 'QC', 75000);

+----------+------------+--------------+
| DPT_CODE | DPT_NAME   | DPT_ALLOTMENT|
+----------+------------+--------------+
|    57    | IT         |      65000   |
|    63    | Finance    |      15000   |
|    47    | HR         |     240000   |
|    27    | RD         |      55000   |
|    89    | QC         |      75000   |
+----------+------------+--------------+

2. emp_details

create table emp_details (
    EMP_IDNO int primary key, 
    EMP_FNAME varchar(255) not null, 
    EMP_LNAME varchar(255) not null, 
    EMP_DEPT int not null FOREIGN KEY REFERENCES emp_department(DPT_CODE)
)

INSERT INTO emp_details (EMP_IDNO, EMP_FNAME, EMP_LNAME, EMP_DEPT) VALUES
(127323, 'Michale', 'Robbin', 57),
(526689, 'Carlos', 'Snares', 63),
(843795, 'Enric', 'Dosio', 57),
(328717, 'Jhon', 'Snares', 63),
(444527, 'Joseph', 'Dosni', 47),
(659831, 'Zanifer', 'Emily', 47),
(847674, 'Kuleswar', 'Sitaraman', 57),
(748681, 'Henrey', 'Gabriel', 47),
(555935, 'Alex', 'Manuel', 57),
(539569, 'George', 'Mardy', 27),
(733843, 'Mario', 'Saule', 63),
(631548, 'Alan', 'Snappy', 27),
(839139, 'Maria', 'Foster', 57);

+----------+------------+------------+-----------+
| EMP_IDNO | EMP_FNAME  | EMP_LNAME  | EMP_DEPT  |
+----------+------------+------------+-----------+
|  127323  | Michale    | Robbin     |    57     |
|  526689  | Carlos     | Snares     |    63     |
|  843795  | Enric      | Dosio      |    57     |
|  328717  | Jhon       | Snares     |    63     |
|  444527  | Joseph     | Dosni      |    47     |
|  659831  | Zanifer    | Emily      |    47     |
|  847674  | Kuleswar   | Sitaraman  |    57     |
|  748681  | Henrey     | Gabriel    |    47     |
|  555935  | Alex       | Manuel     |    57     |
|  539569  | George     | Mardy      |    27     |
|  733843  | Mario      | Saule      |    63     |
|  631548  | Alan       | Snappy     |    27     |
|  839139  | Maria      | Foster     |    57     |
+----------+------------+------------+-----------+

3. company_mast

create table emp_details (
    COM_ID int primary key, 
    COM_NAME varchar(255) not null
)

INSERT INTO company_mast (COM_ID, COM_NAME) VALUES
(11, 'Samsung'),
(12, 'iBall'),
(13, 'Epsion'),
(14, 'Zebronics'),
(15, 'Asus'),
(16, 'Frontech');

+--------+-------------+
| COM_ID |  COM_NAME   |
+--------+-------------+
|   11   |  Samsung    |
|   12   |  iBall      |
|   13   |  Epsion     |
|   14   |  Zebronics  |
|   15   |  Asus       |
|   16   |  Frontech   |
+--------+-------------+


4. item_mast

CREATE TABLE item_mast (
    PRO_ID int primary key,
    PRO_NAME varchar(255) not null,
    PRO_PRICE int not null,
    PRO_COM int FOREIGN KEY REFERENCES company_mast(COM_ID)
)

INSERT INTO item_mast (PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM) VALUES
(101, 'Mother Board', 3200, 15),
(102, 'Key Board', 450, 16),
(103, 'ZIP drive', 250, 14),
(104, 'Speaker', 550, 16),
(105, 'Monitor', 5000, 11),
(106, 'DVD drive', 900, 12),
(107, 'CD drive', 800, 12),
(108, 'Printer', 2600, 13),
(109, 'Refill cartridge', 350, 13),
(110, 'Mouse', 250, 12);

+--------+---------------------+------------+---------+
| PRO_ID | PRO_NAME            | PRO_PRICE  | PRO_COM |
+--------+---------------------+------------+---------+
|    101 | Mother Board        |       3200 |      15 |
|    102 | Key Board           |        450 |      16 |
|    103 | ZIP drive           |        250 |      14 |
|    104 | Speaker             |        550 |      16 |
|    105 | Monitor             |       5000 |      11 |
|    106 | DVD drive           |        900 |      12 |
|    107 | CD drive            |        800 |      12 |
|    108 | Printer             |       2600 |      13 |
|    109 | Refill cartridge    |        350 |      13 |
|    110 | Mouse               |        250 |      12 |
+--------+---------------------+------------+---------+



5. salesman

CREATE TABLE salesman (
    salesman_id int primary key,
    name varchar(255) not null,
    city varchar(255) not null,
    commission float not null
);


INSERT INTO salesman (salesman_id, name, city, commission) VALUES
(5001, 'James Hoog', 'New York', 0.15),
(5002, 'Nail Knite', 'Paris', 0.13),
(5005, 'Pit Alex', 'London', 0.11),
(5006, 'Mc Lyon', 'Paris', 0.14),
(5007, 'Paul Adam', 'Rome', 0.13),
(5003, 'Lauson Hen', 'San Jose', 0.12);

+-------------+------------+----------+------------+
| salesman_id |    name    |   city   | commission |
+-------------+------------+----------+------------+
|      5001   | James Hoog | New York |     0.15   |
|      5002   | Nail Knite |  Paris   |     0.13   |
|      5005   |  Pit Alex  |  London  |     0.11   |
|      5006   |  Mc Lyon   |  Paris   |     0.14   |
|      5007   | Paul Adam  |   Rome   |     0.13   |
|      5003   | Lauson Hen | San Jose |     0.12   |
+-------------+------------+----------+------------+



6. customer

CREATE TABLE customer (
    customer_id int primary key,
    cust_name varchar(255) not null,
    city varchar(255) not null,
    grade int not null,
    salesman_id int FOREIGN KEY REFERENCES salesman(salesman_id)
);

INSERT INTO customer (customer_id, cust_name, city, grade, salesman_id) VALUES
(3002, 'Nick Rimando', 'New York', 100, 5001),
(3007, 'Brad Davis', 'New York', 200, 5001),
(3005, 'Graham Zusi', 'California', 200, 5002),
(3008, 'Julian Green', 'London', 300, 5002),
(3004, 'Fabian Johnson', 'Paris', 300, 5006),
(3009, 'Geoff Cameron', 'Berlin', 100, 5003),
(3003, 'Jozy Altidor', 'Moscow', 200, 5007),
(3001, 'Brad Guzan', 'London', 100, 5005);

+-------------+----------------+------------+-------+-------------+
| customer_id |   cust_name    |    city    | grade | salesman_id |
+-------------+----------------+------------+-------+-------------+
|     3002    |  Nick Rimando  | New York   |  100  |     5001    |
|     3007    |   Brad Davis   | New York   |  200  |     5001    |
|     3005    |  Graham Zusi   | California |  200  |     5002    |
|     3008    |  Julian Green  |   London   |  300  |     5002    |
|     3004    | Fabian Johnson |   Paris    |  300  |     5006    |
|     3009    | Geoff Cameron  |   Berlin   |  100  |     5003    |
|     3003    |  Jozy Altidor  |   Moscow   |  200  |     5007    |
|     3001    |   Brad Guzan   |   London   |       |     5005    |
+-------------+----------------+------------+-------+-------------+


7. orders

CREATE TABLE customer (
    ord_no int primary key,
    purch_amt float not null,
    ord_date date not null,
    customer_id int FOREIGN KEY REFERENCES customer(customer_id),
    salesman_id int FOREIGN KEY REFERENCES salesman(salesman_id)
);

INSERT INTO orders (ord_no, purch_amt, ord_date, customer_id, salesman_id) VALUES
(70001, 150.5, '2012-10-05', 3005, 5002),
(70009, 270.65, '2012-09-10', 3001, 5005),
(70002, 65.26, '2012-10-05', 3002, 5001),
(70004, 110.5, '2012-08-17', 3009, 5003),
(70007, 948.5, '2012-09-10', 3005, 5002),
(70005, 2400.6, '2012-07-27', 3007, 5001),
(70008, 5760, '2012-09-10', 3002, 5001),
(70010, 1983.43, '2012-10-10', 3004, 5006),
(70003, 2480.4, '2012-10-10', 3009, 5003),
(70012, 250.45, '2012-06-27', 3008, 5002),
(70011, 75.29, '2012-08-17', 3003, 5007),
(70013, 3045.6, '2012-04-25', 3002, 5001);


+--------+-----------+------------+-------------+-------------+
| ord_no | purch_amt |  ord_date  | customer_id | salesman_id |
+--------+-----------+------------+-------------+-------------+
|  70001 |    150.5  | 2012-10-05 |        3005 |        5002 |
|  70009 |   270.65  | 2012-09-10 |        3001 |        5005 |
|  70002 |    65.26  | 2012-10-05 |        3002 |        5001 |
|  70004 |    110.5  | 2012-08-17 |        3009 |        5003 |
|  70007 |    948.5  | 2012-09-10 |        3005 |        5002 |
|  70005 |   2400.6  | 2012-07-27 |        3007 |        5001 |
|  70008 |     5760  | 2012-09-10 |        3002 |        5001 |
|  70010 |  1983.43  | 2012-10-10 |        3004 |        5006 |
|  70003 |   2480.4  | 2012-10-10 |        3009 |        5003 |
|  70012 |   250.45  | 2012-06-27 |        3008 |        5002 |
|  70011 |    75.29  | 2012-08-17 |        3003 |        5007 |
|  70013 |   3045.6  | 2012-04-25 |        3002 |        5001 |
+--------+-----------+------------+-------------+-------------+


-- (1) Write a SQL statement to find the total purchase amount of all orders. 17541.18
	select sum(purch_amt) as Total_Purchase_Amount from orders

-- (2) Write a SQL statement to find the average purchase amount of all orders. 1461.765
	select avg(purch_amt) as Average_Purchase_Amount from orders

-- (3) Write a SQL statement to find the number of salesmen currently listing for all of their customers.
	select count(distinct(salesman_id)) as Number_of_Salesman from customer

-- (4) Write a SQL statement to know how many customers have listed their names.
	select count(customer_id) as Number_of_Customers from customer

-- (5) Write a SQL statement to find the number of customers who get at least a gradation for his/her performance.
	select count(customer_id) as No_of_Customer_get_graduation from customer where grade is not null

-- (6) Write a SQL statement to get the maximum purchase amount of all the orders.
	select max(purch_amt) as Maximum_Purchase_Amount from orders

-- (7) Write a SQL statement to get the minimum purchase amount of all the orders.
	select min(purch_amt) as Maximum_Purchase_Amount from orders

-- (8) Write a SQL statement which selects the highest grade for each of the cities of the customers.
	select city, max(grade) as Maximum_Graduation from customer group by city

-- (9) Write a SQL statement to find the highest purchase amount ordered by each customer with their ID and highest purchase amount.
	select customer_id, max(purch_amt) as Highest_Purchase_Amount from orders group by customer_id

-- (10) Write a SQL statement to find the highest purchase amount ordered by each customer on a particular date with their ID, order date, and highest purchase amount.
	select customer_id, ord_date as Order_Date, max(purch_amt) as Highest_Purchase_Amount from orders group by ord_date, customer_id

-- (11) Write a SQL statement to find the highest purchase amount on a date '2012-08-17' for each salesman with their ID.
	select salesman_id, max(purch_amt) as Highest_Purchase_Amount from orders where ord_date='2012-08-17' group by salesman_id

-- (12) Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have the highest purchase amount in a day is more than 2000.
	select customer_id, ord_date as Order_Date, max(purch_amt) as Highest_Purchase_Amount from orders where purch_amt > 2000 group by ord_date, customer_id

-- (13) Write a SQL statement to find the highest purchase amount with their ID and order date, for those customers who have a higher purchase amount in a day is within the range 2000 and 6000.
	select customer_id, ord_date as Order_Date, max(purch_amt) as Highest_Purchase_Amount from orders where purch_amt between 2000 and 6000 group by ord_date, customer_id

-- (14) Write a SQL statement to find the highest purchase amount with their ID and order date, for only those customers who have a higher purchase amount in a day is within the list 2000, 3000, 5760, and 6000.
	select customer_id, ord_date as Order_Date, max(purch_amt) as Highest_Purchase_Amount from orders group by ord_date, customer_id HAVING max(purch_amt) IN (2000, 3000, 5760, 6000);

-- (15) Write a SQL statement to find the highest purchase amount with their ID, for only those customers whose ID is within the range 3002 and 3007.
	select customer_id, max(purch_amt) as Highest_Purchase_Amount from orders where customer_id between 3002 and 3007 group by customer_id

-- (16) Write a SQL statement to display customer details (ID and purchase amount) whose IDs are within the range 3002 and 3007 and highest purchase amount is more than 1000.
	select customer_id, max(purch_amt) as Highest_Purchase_Amount from orders where customer_id between 3002 and 3007 group by customer_id having max(purch_amt) > 1000

-- (17) Write a SQL statement to find the highest purchase amount with their ID, for only those salesmen whose ID is within the range 5003 and 5008.
	select salesman_id, max(purch_amt) as Highest_Purchase_Amount from orders where salesman_id between 5003 and 5008 group by salesman_id

-- (18) Write a SQL statement that counts all orders for a date August 17th, 2012.
	select count(ord_no) as No_of_orders from orders where ord_date='2012-08-17'

-- (19) Write a SQL statement that counts the number of salesmen for whom a city is specified. Note that there may be spaces or no spaces in the city column if no city is specified.
	select count(salesman_id) as No_of_Salesman from salesman where TRIM(city) <> ''

-- (20) Write a query that counts the number of salesmen with their order date and ID registering orders for each day.
	select ord_date, salesman_id, count(*) as No_of_Orders from orders group by ord_date, salesman_id

-- (21) Write a SQL query to calculate the average price of all the products.
	select avg(PRO_PRICE) as Average_Price_of_Products from item_mast

-- (22) Write a SQL query to find the number of products with a price more than or equal to Rs.350.
	select count(*) as No_of_Products from item_mast where PRO_PRICE > 350

-- (23) Write a SQL query to display the average price of each company's products, along with their code.
	select PRO_COM, avg(PRO_PRICE) as Average_Price_of_Products from item_mast group by PRO_COM

-- (24) Write a query in SQL to find the sum of the allotment amount of all departments.
	select sum(DPT_ALLOTMENT) as Sum_of_Allotment from emp_department

-- (25) Write a query in SQL to find the number of employees in each department along with the department code.
	select EMP_DEPT, count(EMP_IDNO) as No_of_Employee_In_Dept from emp_details group by EMP_DEPT
